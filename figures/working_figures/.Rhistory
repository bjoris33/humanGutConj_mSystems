install.packages("stringi")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("ALDEx2")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("dada2")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("PROPER")
library(propr)
library(ALDEx2)
filtR <- function(count_file, rho_CO=0.7, clr_CO=5) {
m <- read.table(count_file)
m.n0 <- m[,2:ncol(m)]
m.clr <- aldex.clr(m.n0, conds = rep("x", ncol(m.n0)))
m.propr <- aldex2propr(m.clr)
m.propr <- m.propr[">", rho_CO]
m.propr.simp <- simplify(m.propr)
rhopairs <- data.frame()
coords <- for(i in m.propr.simp@pairs) {
if(i %% ncol(m.propr.simp@logratio) == 0) {
rhopairs <- rbind(rhopairs, c(ncol(m.propr.simp@logratio), i %/% ncol(m.propr.simp@logratio)))
}
else {
rhopairs <- rbind(rhopairs, c(i %% ncol(m.propr.simp@logratio) , i %/% ncol(m.propr.simp@logratio) +1))
}
}
clrmeans <- colMeans(m.propr.simp@logratio)
clrmeans <- as.vector(clrmeans)
clrdiffer <- function(x) {
clrmeans[rhopairs[,1]] - clrmeans[rhopairs[,2]]
}
clrdiff <- sapply(1, clrdiffer)
taxpairs <- as.numeric(colnames(m.propr.simp@logratio))
taxa <- m[taxpairs,1]
taxa <- as.character(taxa)
final1 <- cbind(colnames(m.propr.simp@logratio[,rhopairs[,1]]), colnames(m.propr.simp@logratio[,rhopairs[,2]]), format(round(m.propr.simp@matrix[m.propr.simp@pairs], 4), nsamll=4), format(round(clrdiff, 4), nsmall=4), taxa[rhopairs[,1]], taxa[rhopairs[,2]])
colnames(final1) <- c("OTU/ASV_1", "OTU/ASV_2", "Rho_Value", "CLR_Difference", "Taxonomy_of_OTU/ASV_1", "Taxonomy_of_OTU/ASV 2")
final5 <- final1[which(abs(as.numeric(final1[,4])) > clr_CO),]
m.neg <- as.numeric(final5[which(as.numeric(final5[,4]) < 0), 1])
m.pos <- as.numeric(final5[which(as.numeric(final5[,4]) > 0), 2])
m.remove <- unique(sort(c(m.pos, m.neg)))
filtR_table <- m[-m.remove,]
}
# taxonomy column has to be the first column
filtR <- function(count_file, rho_CO=0.7, clr_CO=5) {
m <- read.table(count_file)
m.n0 <- m[,2:ncol(m)]
m.clr <- aldex.clr(m.n0, conds = rep("x", ncol(m.n0)))
m.propr <- aldex2propr(m.clr)
m.propr <- m.propr[">", rho_CO]
m.propr.simp <- simplify(m.propr)
rhopairs <- data.frame()
coords <- for(i in m.propr.simp@pairs) {
if(i %% ncol(m.propr.simp@logratio) == 0) {
rhopairs <- rbind(rhopairs, c(ncol(m.propr.simp@logratio), i %/% ncol(m.propr.simp@logratio)))
}
else {
rhopairs <- rbind(rhopairs, c(i %% ncol(m.propr.simp@logratio) , i %/% ncol(m.propr.simp@logratio) +1))
}
}
clrmeans <- colMeans(m.propr.simp@logratio)
clrmeans <- as.vector(clrmeans)
clrdiffer <- function(x) {
clrmeans[rhopairs[,1]] - clrmeans[rhopairs[,2]]
}
clrdiff <- sapply(1, clrdiffer)
taxpairs <- as.numeric(colnames(m.propr.simp@logratio))
taxa <- m[taxpairs,1]
taxa <- as.character(taxa)
final1 <- cbind(colnames(m.propr.simp@logratio[,rhopairs[,1]]), colnames(m.propr.simp@logratio[,rhopairs[,2]]), format(round(m.propr.simp@matrix[m.propr.simp@pairs], 4), nsamll=4), format(round(clrdiff, 4), nsmall=4), taxa[rhopairs[,1]], taxa[rhopairs[,2]])
colnames(final1) <- c("OTU/ASV_1", "OTU/ASV_2", "Rho_Value", "CLR_Difference", "Taxonomy_of_OTU/ASV_1", "Taxonomy_of_OTU/ASV 2")
final5 <- final1[which(abs(as.numeric(final1[,4])) > clr_CO),]
m.neg <- as.numeric(final5[which(as.numeric(final5[,4]) < 0), 1])
m.pos <- as.numeric(final5[which(as.numeric(final5[,4]) > 0), 2])
m.remove <- unique(sort(c(m.pos, m.neg)))
filtR_table <- m[-m.remove,]
return(filtR_table)
}
library(filtR)
?filtR
devtools::install_github('bjoris33/filtR')
library(filtR)
browseVignettes("filtR")
devtools::install_github('bjoris33/filtR')
library(filtR)
browseVignettes("filtR")
library()
?c
?paste
combined <- paste('abc', 'def')
combined <- paste('abc', 'def', sep = NULL)
combined <- paste('abc', 'def', sep = FALSE)
combined <- paste('abc', 'def', collapse = TRUE)
table
?table
library("pandocfilters", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALDEx2", version = "3.8")
library(ALDEx2)
library(omicplotR)
BiocManager::install("omicplotR")
library(omicplotR)
omicplotr.run()
omicplotr.run()
omicplotr.run()
omicplotr.run()
library(omicplotR)
omicplotr.run()
omicplotr.run()
omicplotr.run()
devtools::install_github("dgiguer/omicplotR", ref = "dev")
library(omicplotR)
omicplotr.run()
library(omicplotR)
omicplotr.run()
library(ALDEx2)
data("selex")
selex <- selex[1201:1600,]
conds <- c(rep("NS", 7), rep("S", 7))
x <- aldex(selex, conds, mc.samples=16, test="t", effect=TRUE, include.sample.summary=FALSE, denom="iqlr", verbose=FALSE)
aldex.plot(x, type="MA", test="welch")
aldex.plot(x, type="MW", test="welch")
x <- aldex.clr(selex, conds, mc.samples=16, denom="iqlr", verbose=TRUE)
x.tt <- aldex.ttest(x, conds, paired.test=TRUE)
x.glm <- aldex.glm(x, conds)
x.effect <- aldex.effect(x, conds, include.sample.summary=FALSE, verbose=TRUE)
x.all <- data.frame(x.tt,x.effect)
par(mfrow=c(1,2))
aldex.plot(x.all, type="MA", test="welch")
aldex.plot(x.all, type="MW", test="welch")
head(x.all)
devtools::install_github(repo = "UVic-omics/selbal")
library(selbal)
?selbal.cv
featuretab <- read.table("Desktop/PhD/qiimetest/collapsetab.txt")
featuretab <- read.table("Desktop/PhD/qiimetest/PRJEB10590_metadata.tsv")
featuretab <- read.table("Desktop/PhD/qiimetest/collapsetab.txt")
metadata <- read.table("Desktop/PhD/qiimetest/PRJEB10590_metadata.tsv")
View(metadata)
View(featuretab)
library(survival)
install.packages('Rcpp')
library(survival)
install.packages('survival')
install.packages("survival")
library(survival)
effecttab <- read.table('Desktop/PhD/lipid_reanalysis/PRJEB10590/aldex_output.txt')
View(effecttab)
effecttab2 <- read.table('Desktop/PhD/lipid_reanalysis/PRJEB10590/aldex_output_new.txt')
View(effecttab2)
View(effecttab)
?read.table
library(ALDEx2)
d <- read.table('Desktop/PhD/qiimetest/collapsetab.txt', header=T, sep="\t", stringsAsFactors=F, quote = "", check.names=F, row.names=1, comment.char="")
View(d)
d.r <- d[,1:83]
?aldex
?plot
?aldex.effect
?aldex.plot
library(ALDEx2
)
?aldex.plot
options.left<-c(1,2,3,4)
options.left[-1]
r1 <- c(1,2,3)
r2 <- c(2,3,4)
m1 <- matrix()
m1 <- rbind(r1)
m1 <- rbind(r2)
?rbind
m1 <- rbind(r1,r2)
m1 <- rbind(r1)
m1[1,] <- rbind(r1)
m1[2,] <- rbind(r2)
m1 <- matrix(nrow = 2)
m1[1,] <- rbind(r1)
m1 <- matrix(nrow = 2, ncol = 3)
m1[1,] <- rbind(r1)
m1[2,] <- rbind(r2)
m1
apply(m1, 1, function(x) sum(x))
m2 <- as.matrix(c(r1,r2))
m2 <- as.matrix(r1,r2)
m2 <- as.matrix(r1)
rbind(r2,m2)
m2[2,] <- rbind(r2)
m2[,2] <- cbind(r2)
m2 <- cbind(r2)
x <- c(1,2,3)
x.mat <- matrix(rep(x,2), nrow = 2, ncol = 3 )
View(x.mat)
View(x.mat)
log(x) - mean(log(x))
apply(x.mat,1, function(x) log(x) - mean(log(x)) )
apply(x.mat,2, function(x) log(x) - mean(log(x)) )
apply(x.mat,1, function(x) log(x) - mean(log(x)) )
log(x) - mean(log(x))
t(apply(x.mat,1, function(x) log(x) - mean(log(x)) ))
'''
hello
world
'''
library(CoDaSeq)
library(CoDaSeq)
data("ak_op")
ak.op <- ak_op
ak.op
#What is the size of that dataset?
dim(ak.op)
#How many features have an average of at least one count?
ak.op.n0 <- ak.op[rowSums(ak.op)>0,]
dim(ak.op.n0)
#Aggregate data
name.agg.ak <- paste("AK", 1:15, sep = ".")
name.agg.op <- paste("OP", 1:15, sep = ".")
name.agg.ak
name.agg.op
ak.agg <- aggregate(t(ak), by=list(name.agg.ak), FUN=sum)
library(CoDaSeq)
data("ak_op")
ak.op <- ak_op
ak.op
#What is the size of that dataset?
dim(ak.op)
#How many features have an average of at least one count?
ak.op.n0 <- ak.op[rowSums(ak.op)>0,]
dim(ak.op.n0)
#Aggregate data
name.agg.ak <- paste("AK", 1:15, sep = ".")
name.agg.op <- paste("OP", 1:15, sep = ".")
name.agg.ak
name.agg.op
ak.agg <- aggregate(t(ak.op), by=list(name.agg.ak), FUN=sum)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(CoDaSeq)
data(ak_op)
# Question 1: What is the size of that dataset?
ak_op
dim(ak_op)
head(ak_op)
# Answer: This dataset has 4347 rows/features and 30 columns/samples
#Question 2: How many features have an average of at least one count?
sub2=ak_op[which(data$rowmeans>=1),]
library(CoDaSeq)
data(ak_op)
# Question 1: What is the size of that dataset?
ak_op
dim(ak_op)
head(ak_op)
# Answer: This dataset has 4347 rows/features and 30 columns/samples
#Question 2: How many features have an average of at least one count?
sub2<-ak_op[which(data$rowmeans>=1),]
library(CoDaSeq)
data(ak_op)
# Question 1: What is the size of that dataset?
ak_op
dim(ak_op)
head(ak_op)
# Answer: This dataset has 4347 rows/features and 30 columns/samples
#Question 2: How many features have an average of at least one count?
sub2<-ak_op[which(ak_op$rowmeans>=1),]
sub2
nrow(ak_op)
nrow(sub2)
#Answer: There are 804 features that have an average of at least one count
#Question 3: Filter the dataset to features that have an average of one count across the entire dataset
sub1=ak_op[which(data$rowmeans==1),] #Answer
library(CoDaSeq)
data(ak_op)
# Question 1: What is the size of that dataset?
ak_op
dim(ak_op)
head(ak_op)
# Answer: This dataset has 4347 rows/features and 30 columns/samples
#Question 2: How many features have an average of at least one count?
sub2<-ak_op[which(ak_op$rowmeans>=1),]
sub2
nrow(ak_op)
nrow(sub2)
#Answer: There are 804 features that have an average of at least one count
#Question 3: Filter the dataset to features that have an average of one count across the entire dataset
sub1=ak_op[which(ap_op$rowmeans==1),] #Answer
library(CoDaSeq)
data(ak_op)
# Question 1: What is the size of that dataset?
ak_op
dim(ak_op)
head(ak_op)
# Answer: This dataset has 4347 rows/features and 30 columns/samples
#Question 2: How many features have an average of at least one count?
sub2<-ak_op[which(ak_op$rowmeans>=1),]
sub2
nrow(ak_op)
nrow(sub2)
#Answer: There are 804 features that have an average of at least one count
#Question 3: Filter the dataset to features that have an average of one count across the entire dataset
sub1<-ak_op[which(ap_op$rowmeans==1),] #Answer
d <- c(40,30,50,40,50,40,50,60,80,50,60,30,70)
mean(d)
median(d)
sdev()
sd(d)
sqrt(var(d)/length(d))
var(d)
d <- c(30,30,40,40,40,50,50,50,50,60,60,70,80)
sd(d)
var(d)
setwd("Desktop/PhD/plasmid_paper/paper/")
install.packages('pandoc')
?plot
?points
setwd("Desktop/PhD/plasmid_paper/figures/working_figures/")
install.packages(gggenes)
"gggenes"
library(gggenes)
install.packages("gggenes")
d <- read.table("../gene_maps/UMGS54_refined_1.txt", sep="\t", header = T, stringsAsFactors = F, quote = "")
d.ordered <- d[,c("orfnum","molecule","start","end","strand","direction","function.","anno1","anno2","anno3","anno4","anno5","anno6","anno7","anno8","anno9","anno10")]
d.split <- split.data.frame(d.ordered, f=d.ordered$molecule)
library(ggplot2)
library(gggenes)
View(d)
View(d.ordered)
View(d)
strt <- min(which(d$function. != "N/A")-5)
if(strt < 1){
strt <- 1
}
temp.reduced <- d[strt:(max(which(d$function. != "N/A"))+5),]
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y=i,fill=function.,label=orfnum,forward=direction))+
geom_gene_arrow()+
geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")
plot
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=orfnum,forward=direction))+
geom_gene_arrow()+
geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")
plot
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")
plot
?geom_gene_label
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
geom_gene_label(align="left",reflow = T)+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")
plot
plot
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,forward=direction))+
geom_gene_arrow()+
geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()
plot
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
#geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()
plot
temp.reduced <- d[strt:85,]
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
#geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()
plot
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
#geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()+
ylab("")
plot
colnames(d$function.) <- "Function"
View(d)
View(d)
colnames(d$)[7] <- "Function"
colnames(d)[7] <- "Function"
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=function.,label=anno1,forward=direction))+
geom_gene_arrow()+
#geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()+
ylab("")
plot
View(d)
temp.reduced <- d[strt:85,]
plot <- ggplot(temp.reduced,aes(xmin=start,xmax=end,y="",fill=Function,label=anno1,forward=direction))+
geom_gene_arrow()+
#geom_gene_label(align="left")+
facet_wrap(~ molecule, scales = "free", ncol = 1)+
scale_fill_brewer(palette = "Set3")+
theme_genes()+
ylab("")
plot
ggsave("figure_1.png", device = "png")
